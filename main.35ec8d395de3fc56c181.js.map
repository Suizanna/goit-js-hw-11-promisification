{"version":3,"sources":["webpack:///./js/task-1.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","errorCatch","error","then","catch"],"mappings":"gLAAMA,EAAQ,SAAAC,GAEV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAEzBC,YAAW,WACPF,EAAQF,GACRG,EAAO,WACRH,OAIHK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OACjBG,EAAa,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,IAGxCX,EAAM,KAAMY,KAAKN,GAAQO,MAAMH,GAC/BV,EAAM,KAAMY,KAAKN,GAAQO,MAAMH,GAC/BV,EAAM,MAAMY,KAAKN,GAAQO,MAAMH,G","file":"main.35ec8d395de3fc56c181.js","sourcesContent":["const delay = ms => {\r\n  \r\n    return new Promise((resolve, reject) => {\r\n\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n            reject('error');\r\n        }, ms)\r\n    })\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  const errorCatch = error => console.log(error);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger).catch(errorCatch); // Resolved after 2000ms\r\n  delay(1000).then(logger).catch(errorCatch); // Resolved after 1000ms\r\n  delay(1500).then(logger).catch(errorCatch); // Resolved after 1500ms\r\n\r\n"],"sourceRoot":""}