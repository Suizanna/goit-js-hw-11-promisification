{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","errorCatch","error","then","catch","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount"],"mappings":"2JAAMA,EAAQ,SAAAC,GAEV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAEzBC,YAAW,WACPF,EAAQF,GACRG,EAAO,WACRH,OAIHK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OACjBG,EAAa,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,IAGxCX,EAAM,KAAMY,KAAKN,GAAQO,MAAMH,GAC/BV,EAAM,KAAMY,KAAKN,GAAQO,MAAMH,GAC/BV,EAAM,MAAMY,KAAKN,GAAQO,MAAMH,G,kCCjB3BI,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAEnC,OAAO,IAAIjB,SAAQ,SAACC,EAASC,GAI/BD,EAHyBe,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,MAGrEjB,EAAO,YAICE,EAAS,SAAAgB,GAAY,OAAId,QAAQe,MAAMD,IACvCZ,EAAa,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,IAGxCM,EAAgBH,EAAO,SAASF,KAAKN,GAAQO,MAAMH,GACnDO,EAAgBH,EAAO,OAAOF,KAAKN,GAAQO,MAAMH,GCvBnD,IAIQc,EAAkB,SAACC,GAEvB,OAAO,IAAIvB,SAAQ,SAACC,EAASC,GACzB,IAP2BsB,EAAKC,EAO1B3B,GAPqB0B,EAOa,IAPRC,EAOa,IAN1CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAQpDrB,YAAW,WACYuB,KAAKE,SAAW,GAG/B3B,EAAQ,CAAC4B,GAAIN,EAAYM,GAAIxB,KAAMP,IAEnCI,EAAOqB,EAAYM,MAEtB/B,OAIDgC,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAIxB,EAAU,EAAVA,KACvBC,QAAQC,IAAR,eAA2BsB,EAA3B,iBAA8CxB,EAA9C,OAGI0B,EAAW,SAAAF,GACfvB,QAAQ0B,KAAR,gCAA6CH,EAA7C,8BAGFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLnB,MAAMoB,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLnB,MAAMoB,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLnB,MAAMoB,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLnB,MAAMoB,K","file":"main.09fcf1e464320b08536d.js","sourcesContent":["const delay = ms => {\r\n  \r\n    return new Promise((resolve, reject) => {\r\n\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n            reject('error');\r\n        }, ms)\r\n    })\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  const errorCatch = error => console.log(error);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger).catch(errorCatch); // Resolved after 2000ms\r\n  delay(1000).then(logger).catch(errorCatch); // Resolved after 1000ms\r\n  delay(1500).then(logger).catch(errorCatch); // Resolved after 1500ms\r\n\r\n","const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n   \r\n  return new Promise((resolve, reject) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      );\r\nresolve(updatedUsers);\r\nreject('Упс!');\r\n  });\r\n  };\r\n  \r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n  const errorCatch = error => console.log(error);\r\n  \r\n \r\n  toggleUserState(users, 'Mango').then(logger).catch(errorCatch);\r\n  toggleUserState(users, 'Lux').then(logger).catch(errorCatch);","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  const makeTransaction = (transaction) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n        \r\n    setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n    \r\n        if (canProcess) {\r\n            resolve({id: transaction.id, time: delay});\r\n        } else {\r\n            reject(transaction.id);\r\n        }\r\n      }, delay);\r\n    });\r\n    };\r\n  \r\n  const logSuccess = ({id, time}) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"sourceRoot":""}